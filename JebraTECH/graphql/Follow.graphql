extend type Query {
    #this returns the ips that follow that user and the front end pro get the data of each one with User(id) query.
    GetFollowersForUser(
        followed_id: Int! @eq @rules(apply: ["exists:users,id"])
    ): [Follow!]! @paginate
}

extend type Mutation {

#///// check if he is writer /////////////////
    AddFollow(
        follower_id: Int! @rules(apply: ["required", "int", "exists:users,id"])
        followed_id: Int @rules(apply: ["required", "int", "exists:users,id"])
    ): Follow! @create @event(dispatch: "App\\Events\\FollowEvent") @guard

    Unfollow(
        follower_id: Int! @eq @rules(apply: ["exists:users,id"])
        followed_id: Int @eq @rules(apply: ["exists:users,id"])
    ): Follow! @forceDelete @guard
}

type Follow {
    id: ID!
    follower_id: Int!
    followed_id: Int!
    created_at: DateTime!

    follows: [User]! @belongsToMany
}

