extend type Query {
    blog(id: ID @eq): Blog! @find
    blogs: [Blog!]! @paginate(defaultCount: 10)
    #GetPopoularBlog:[Blog!] #@paginate(defaultCount: 10) # most <read , <share , <like , <comment
    GetPopoularBlog(first: Int!, page: Int!): [Blog!]! @paginate(builder: "App\\GraphQL\\Queries\\Blogs\\GetPopoularBlog")
    GetBlogsWithTime(date1: DateTime, date2: DateTime): [Blog!]!
}

extend type Mutation {
    CreatBlog(
        title: String! @rules(apply: ["required", "string", "max:250"])
        body: String! @rules(apply: ["required", "string"])
        description: String! @rules(apply: ["required", "string", "max:500"])
        is_hidden: Boolean
        category_id: Int!  @rules(apply: ["required", "exists:categories,id"])
        writter_id: Int! @rules(apply: ["required", "exists:users,id"])
    ): Blog!

    UpdateBlog(
        id: ID! @rules(apply: ["required", "exists:blogs,id"])
        title: String! @rules(apply: ["required", "string", "max:250"])
        body: String! @rules(apply: ["required", "string"])
        description: String! @rules(apply: ["required", "string", "max:500"])
        is_hidden: Boolean
        category_id: Int!  @rules(apply: ["required", "exists:categories,id"])
    ): Blog!

    DeleteBlog(id: Int! @rules(apply: ["required", "exists:blogs,id"])): Blog!

    RestorBlog(id: Int! @rules(apply: ["required", "exists:blogs,id"])): Blog!

    ShowBlog(id: Int! @rules(apply: ["required", "exists:blogs,id"])): Blog!

    HideBlog(id: Int! @rules(apply: ["required", "exists:blogs,id"])): Blog!
}

type Blog {
    id: ID!
    title: String!
    body: String!
    description: String!
    is_hidden: Int
    category_id: Int!
    writter_id: Int!
    created_at: DateTime!
    updated_at: DateTime!

    category: Category! @belongsTo
    writter: User! @belongsTo
    blogtags: [BlogTag] @hasMany
    media: [Media]! @hasMany
    shares: [Share]! @hasMany
    likes: [Like]! @hasMany
    comments: [Comment]! @hasMany
    reborts: [UserReport]! @hasMany
    reads: [ReadBy]! @hasMany

}
