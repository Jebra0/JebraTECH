extend type Query {

    blog(id: ID @eq): Blog! @find

    blogs: [Blog!]! @paginate(defaultCount: 10)

    GetPopoularBlog(
        first: Int!, page: Int!
    ): [Blog!]! @paginate(builder: "App\\GraphQL\\Queries\\Blogs\\GetPopoularBlog")

    GetBlogsWithTime(date1: DateTime, date2: DateTime): [Blog!]!

    GetUserBlogs(
        writter_id: Int! @eq @rules(apply: ["required", "exists:users,id"])
    ): [Blog!]! @all @orderBy(column: "created_at", direction: DESC)

    GetUserUnvisibleBlogs(
        writter_id: Int! @eq @rules(apply: ["required", "exists:users,id"])
    ): [Blog!]! @all @where(key: "is_hidden", value: 1) @orderBy(column: "created_at", direction: DESC) @guard

    GetUserUnconfirmedBlogs(
        writter_id: Int! @eq @rules(apply: ["required", "exists:users,id"])
    ): [Blog!]! @all @where(key: "is_confirmed", value: 0) @orderBy(column: "created_at", direction: DESC) @guard

    SearchBlog(
        data: String! @rules(apply: ["String", "required", "max: 500"]),
        first: Int! ,
        page: Int!,
    ): [Blog!]! @paginate(builder: "App\\GraphQL\\Queries\\Blogs\\SearchBlog")

    GetBlogWithCategory(category_id: Int! @eq @rules(apply: ["required", "exists:categories,id"])): [Blog!]! @paginate
}

extend type Mutation {
    CreatBlog(
        title: String! @rules(apply: ["required", "string", "max:250"])
        body: String! @rules(apply: ["required", "string"])
        description: String! @rules(apply: ["required", "string", "max:500"])
        is_hidden: Boolean @rules(apply: ["boolean"])
        category_id: Int!  @rules(apply: ["required", "exists:categories,id"])
        writter_id: Int! @rules(apply: ["required", "exists:users,id" ])
        scheduling_date: DateTime @rules(apply: ["date", "after:now"] )
    ): Blog! @create @event(dispatch: "App\\Events\\CreatBlogEvent") @guard

    UpdateBlog(
        id: ID! @eq @rules(apply: ["required", "exists:blogs,id"])
        title: String! @rules(apply: ["required", "string", "max:250"])
        body: String! @rules(apply: ["required", "string"])
        description: String! @rules(apply: ["required", "string", "max:500"])
        is_hidden: Boolean @rules(apply: ["boolean"])
        category_id: Int!  @rules(apply: ["required", "exists:categories,id"])
    ): Blog!  @update @guard

    DeleteBlog(id: Int! @eq @rules(apply: ["required", "exists:blogs,id"])): Blog! @delete @guard

    RestorBlog(id: Int! @rules(apply: ["required", "exists:blogs,id"])): Blog! @guard

    ForceDeleteBlog(id: Int! @eq @rules(apply: ["required", "exists:blogs,id"])): Blog! @forceDelete @guard

    ShowBlog(
        id: Int! @eq @rules(apply: ["required", "exists:blogs,id"])
    ): Blog!

    HideBlog(
        id: Int! @rules(apply: ["required", "exists:blogs,id"])
    ): Blog! @guard

}

type Blog {
    id: ID!
    title: String!
    body: String!
    description: String!
    is_hidden: Boolean
    is_confirmed: Boolean!
    category_id: Int!
    writter_id: Int!
    scheduling_date: DateTime
    created_at: DateTime!
    deleted_at: DateTime!

    category: Category! @belongsTo
    writter: User! @belongsTo
    blogtags: [BlogTag] @hasMany
    media: [Media]! @hasMany
    shares: [Share]! @hasMany
    likes: [Like]! @hasMany
    comments: [Comment]! @hasMany
    reborts: [UserReport]! @hasMany
    reads: [ReadBy]! @hasMany

}
