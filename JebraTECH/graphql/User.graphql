
extend type Query {
    user(
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
    ): User @find @guard

    SearchUser(
        data: String! @rules(apply: ["String", "required", "max: 500"]),
        first: Int! ,
        page: Int!,
    ): [User!]! @paginate(builder: "App\\GraphQL\\Queries\\Users\\SearchUser")

    me: User! @auth @guard


}

extend type Mutation {
    createUser(
        name: String! @rules(apply: ["required", "min:10", "max:100"]),
        email: String! @rules(apply: ["email"]),
        password: String @rules(apply: ["min:8", "max:100"])
    ): User! @create #@guard


    BeWriter(id: ID!): User! @guard

    UpdauteUser(
        id: ID! @rules(apply: ["required", "exists:users,id"]),
        name: String!  @rules(apply: ["required", "min:10", "max:100"]),  #email verification column did not changed
        email: String!  @rules(apply: ["required", "min:10", "max:100", "email"]),
        password: String!  @rules(apply: ["required", "min:8", "max:100"])
    ): User

    DeleteUser(id: ID! @eq @rules(apply: ["required", "exists:users,id"])): User! @delete

#    RestoreUser(id: ID! @eq @rules(apply: ["required", "exists:users,id"])): User! @restore  # next version soon

    ForceDeleteUser(id: ID! @eq @rules(apply: ["required", "exists:users,id"])): User! @forceDelete
}

type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
    password: String
    is_writer: Boolean
    block_expiration_date: DateTime

    shares: [Share]! @hasMany
    likes: [Like]! @hasMany
    comments: [Comment]! @hasMany
    replies: [Reply]! @hasMany
    reborts: [UserReport]! @hasMany
    reads: [ReadBy]! @hasMany
    user_blocks: [UserBlock]! @hasMany
    user_follows: [Follow]! @hasMany
#    chate: Chate! @hasOne #in the next version

}
